{"version":3,"sources":["components/search-box/search-box.component.jsx","components/card/card.componenet.jsx","components/card-list/card-list.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","type","onChange","Card","monster","src","id","name","email","CardList","monsters","map","App","e","setState","serachField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAEaA,EAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACpC,OACI,uBAAOC,UAAU,mBAAmBC,KAAK,SAASH,YAAaA,EAAaI,SAAUH,KCFjFI,EAAO,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAElB,OACI,qBAAKJ,UAAU,cAAf,SACI,sBAAKA,UAAU,OAAf,UACI,qBAAKA,UAAU,aAAf,SACI,wBAAQA,UAAU,gBAAlB,SACI,qBAAKK,IAAG,+BAA0BD,EAAQE,GAAlC,gCAIhB,sBAAKN,UAAU,eAAf,UACI,qBAAKA,UAAU,QAAf,SACKI,EAAQG,OAEb,qBAAKP,UAAU,WAAf,SACKI,EAAQI,iBCdnBC,EAAW,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAEvB,OAEQ,qBAAKV,UAAU,uBAAf,SAEQU,EAASC,KAAI,SAAAP,GACT,OAAO,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQE,UCsCnCM,E,kDAzCb,aAAe,IAAD,8BACZ,gBAaFb,aAAe,SAACc,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAbrC,EAAKC,MAAQ,CACXR,SAAU,GACVK,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACJ,SAAUa,S,oBAM5C,WAAW,IAAD,EAE0BC,KAAKN,MAA/BR,EAFA,EAEAA,SAAUK,EAFV,EAEUA,YAEZU,EAAmBf,EAASgB,QAAO,SAAAtB,GAAO,OAC5CA,EAAQG,KAAKoB,cAAcC,SAASb,EAAYY,kBAGpD,OACA,qBAAK3B,UAAU,UAAf,SACI,sBAAKA,UAAU,gBAAf,UACE,oBAAIA,UAAU,oBAAd,6BACA,cAAC,EAAD,CACIF,YAAY,kBACZC,aAAcyB,KAAKzB,eAEvB,cAAC,EAAD,CAAUW,SAAUe,a,GAnCZI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.cc7714eb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => {\r\n    return (\r\n        <input className='input is-primary' type='search' placeholder={placeholder} onChange={handleChange} />\r\n    );\r\n}","import React from 'react'\r\n\r\nexport const Card = ({monster}) => {\r\n\r\n    return (\r\n        <div className=\"column is-4\">\r\n            <div className=\"card\">\r\n                <div className=\"card-image\">\r\n                    <figure className=\"image is-4by3\">\r\n                        <img src={`https://robohash.org/${monster.id}?set=set2&size=180x180`}/>\r\n                    </figure>\r\n                </div>\r\n\r\n                <div className=\"card-content\">\r\n                    <div className=\"title\">\r\n                        {monster.name}\r\n                    </div>\r\n                    <div className=\"subtitle\">\r\n                        {monster.email}\r\n                    </div>                    \r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport { Card } from '../card/card.componenet';\r\n\r\nexport const  CardList = ({monsters}) => {\r\n\r\n    return (\r\n\r\n            <div className=\"columns is-multiline\">\r\n                {   \r\n                    monsters.map(monster => {\r\n                        return <Card key={monster.id} monster={monster}></Card>\r\n                    })\r\n                }\r\n            </div>\r\n\r\n    )\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport { SearchBox } from './components/search-box/search-box.component';\nimport { CardList } from './components/card-list/card-list.component';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      serachField: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({monsters: users}));\n  }\n\n  handleChange = (e) => {\n    this.setState({serachField: e.target.value});\n  }\n  render () {\n\n    const { monsters, serachField } = this.state;\n\n    const filteredMonsters = monsters.filter(monster => \n        monster.name.toLowerCase().includes(serachField.toLowerCase())\n    );\n\n    return(\n    <div className=\"section\">\n        <div className=\"container box\">\n          <h1 className='has-text-centered'>Monster Rolodex</h1>\n          <SearchBox \n              placeholder='Search Monsters'\n              handleChange={this.handleChange}\n          />\n          <CardList monsters={filteredMonsters} />\n        </div>  \n    </div>  \n    );\n  }\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}